version: '3.7'

services:
  postgres:
    image: postgres:14-alpine
    container_name: influencer_platform_db
    restart: always
    ports:
      - "5435:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: influencer_platform
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: development
    container_name: influencer_platform_backend
    restart: always
    ports:
      - "3005:3005"
    environment:
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - DATABASE_USERNAME=postgres
      - DATABASE_PASSWORD=postgres
      - DATABASE_NAME=influencer_platform
      - JWT_SECRET=your-secret-key-change-in-production
      - JWT_ACCESS_EXPIRATION=15m
      - JWT_REFRESH_EXPIRATION=7d
      - PORT=3005
      - NODE_ENV=development
    volumes:
      - ./backend:/usr/src/app
      - /usr/src/app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network
    command: sh -c "npm install && npm run build && npm run start:dev"

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data: 